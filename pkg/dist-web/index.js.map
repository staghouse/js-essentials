{"version":3,"file":"index.js","sources":["../dist-src/isOdd.js","../dist-src/isFutureDate.js","../dist-src/getURLParams.js","../dist-src/convertToDate.js","../dist-src/jsonMustaches.js","../dist-src/getDOMSiblings.js","../dist-src/getActualMonth.js","../dist-src/quickSortArray.js","../dist-src/sortArrayOfObjects.js"],"sourcesContent":["/**\n * isOdd\n * @param {number} number - Value to check if odd\n * @return Boolean\n * @example\n * isOdd(3)\n */\nexport default function isOdd(number) {\n  if (!isFinite(number) || !!(number % 1)) {\n    throw TypeError('Must provide a valid whole number');\n  }\n\n  return (Math.abs(number) ^ 1) === 2;\n}","/**\n * isFutureDate\n * @param {String|Date} when - when to compare against now\n * @param {String|Date} against - when to compare against the first argument\n * @return Boolean\n * @throws TypeError\n * @throws SyntaxError\n * @example\n * isFutureDate('2019-10-10', '2020-01-01')\n * isFutureDate(new Date('2019-10-10'), '2020-01-01')\n */\nexport default function isFutureDate(when, against = new Date()) {\n  // Check on our types, we only want String and Date for comparison.\n  const typesAreValid = (typeof when === 'string' || when instanceof Date) && (typeof against === 'string' || against instanceof Date);\n\n  if (!typesAreValid) {\n    throw TypeError('You must pass in at leasy one primary argument of type Date or String');\n  } // Its important to remember that when we pass in just a String date\n  // that we wont get a time. So we set this up to do checks later.\n\n\n  let now = new Date(when);\n  let then = new Date(against);\n  /**\n   * Check if valid Date. String with improper formats return `Invalid Date`\n   * which is literal non-sense. Its not an Error of any kind, Number, String, Date or\n   * truthy undefined. Just a typeof Object which no public keys.\n   * In fact, the prototype returns undefined but when chcking for it,\n   * we get not comparison validation at all\n   */\n\n  if (!isFinite(now) || !isFinite(then)) {\n    throw SyntaxError('You must pass in a valid date time with a type of Date');\n  } // Check if simply today is not the future.\n\n\n  const isToday = now.toDateString() === then.toDateString();\n\n  if (isToday) {\n    return false;\n  } // Store UTC miliseconds.\n\n\n  if (typeof when === 'string') {\n    now = Date.parse(when);\n  } else {\n    now = when.getTime();\n  } // Store UTC miliseconds.\n\n\n  if (typeof against === 'string') {\n    then = Date.parse(against);\n  } else {\n    then = against.getTime();\n  } // Compare the miliseconds. It's the only way to be sure.\n\n\n  return then < now;\n}","/**\n * getURLParams\n * @param {number} url - string or URL instance\n * @return object with key/val\n * @throws TypeError\n * @example\n * getURLParmas('http://www.placecage.com?height=100&width=200')\n */\nexport default function getURLParams(url = undefined) {\n  const typeOfUrl = typeof url;\n  const paramsObj = {};\n  let params = undefined;\n\n  if (typeOfUrl !== 'undefined' && (typeOfUrl === 'string' || url instanceof URL)) {\n    url = new URL(url);\n    params = new URLSearchParams(url.search);\n    params.forEach(function (value, key) {\n      paramsObj[key] = value;\n    });\n    return paramsObj;\n  } else {\n    throw TypeError('url must be of type String or URL');\n  }\n}","/**\n * convertToDate\n * @param {number|string|Date} date - Date you want to cast\n * @return Date\n * @throws TypeError\n * @example\n * convertToDate(number|string|date)\n */\nexport default function convertToDate(date) {\n  if (date instanceof Date) {\n    return date;\n  }\n\n  if (typeof date === 'string' || typeof date === 'number') {\n    return new Date(date);\n  }\n\n  throw TypeError('You must pass in a primary argument of type Date, String, or Number');\n}","/**\n * JSONMustaches - A JSON parser for mustaches templates in JSON objects.\n *\n * @type Class\n * @constructor @arguments\n * @param {object} schema - Schema compliant JSON object\n * @use {{type@text@url}}\n */\nexport default class jsonMustaches {\n  constructor(schema) {\n    this.schema = schema;\n    this.delimiter = '@';\n    this.allMustaches = /{{(.*?)}}/g;\n    this.singleMustache = /{{(.*?)}}/;\n    this.hasMustaches = true; // Let us assume\n  } // Basic checking for valid types and syntax\n\n\n  _init() {\n    if (!this.schema) {\n      throw SyntaxError('You must pass in a JSON Schema');\n    }\n\n    if (Object.keys(this.schema).length <= 0 || Object.prototype.toString.call(this.schema) !== '[object Object]') {\n      throw SyntaxError('You must pass in a valid JSON Schema Object with keys');\n    }\n\n    if (!JSON.stringify(this.schema).match(this.allMustaches)) {\n      this.hasMustaches = true;\n      return this.schema;\n    } else {\n      this.search();\n    }\n\n    return this;\n  }\n  /**\n   * @type function\n   * @param {string} value A string containing mustache templates\n   */\n\n\n  convert(value) {\n    // Get just whats inside the mustache\n    const values = value.match(this.singleMustache)[1]; // Destructure whats inside the mustaches via the delimiter\n\n    const [type, text, link = ''] = values.split(this.delimiter); // If we have a link, check if its an external link or not\n\n    const isTargetBlank = link.indexOf('/') === 0 ? '' : `target='_blank'`;\n    const mustacheMap = {\n      html: text,\n      link: `<a href='${link}/' ${isTargetBlank}/>${this.unwrap(text)}</a>`,\n      code: `<code>${text}</code>`\n    };\n    const newValue = mustacheMap[type];\n\n    if (!newValue) {\n      throw SyntaxError(`Invalid mustache template types. Available types are ${Object.keys(mustacheMap).join(', ')}`);\n    }\n\n    return mustacheMap[type];\n  }\n  /**\n   * @type function\n   * Cycle through the JSON schema and replace mustaches as needed,\n   * then return the new JSON\n   */\n\n\n  search() {\n    for (const prop in this.schema) {\n      // Store the value of each object in our schema\n      const value = this.schema[prop]; // Store the main property name so we can hydrate that too\n\n      value.propName = prop;\n\n      for (const key in value) {\n        const val = value[key].toString();\n        const mustaches = val.match(this.allMustaches);\n\n        if (mustaches) {\n          for (const mustache of mustaches) {\n            const hydratedHTML = value[key].replace(mustache, this.convert(mustache));\n            this.schema[prop][key] = hydratedHTML;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @type function\n   * @param {string} str Multiple word normalizing for anchors and URI's\n   */\n\n\n  unwrap(str) {\n    return str.split('-').map((n, i) => {\n      if (i > 0) {\n        return n.charAt(0).toUpperCase() + n.slice(1);\n      }\n\n      return n;\n    }).join('');\n  }\n\n}","/**\n * getDOMSiblings\n * @param {DOM Node} element - DOM element to find siblings for\n * @return Array\n */\nexport default function getDOMSiblings(element) {\n  if (!element) {\n    throw SyntaxError('You must pass in a single argument');\n  }\n\n  if (typeof element !== 'object' || element.nodeType !== 1) {\n    throw TypeError('You must pass in a single DOM Node');\n  }\n\n  let sibling = element.parentNode.firstChild;\n  const siblings = [];\n\n  for (null; sibling; sibling = sibling.nextSibling) {\n    if (sibling.nodeType !== 1 || sibling === element) {\n      continue;\n    }\n\n    siblings.push(sibling);\n  }\n\n  return siblings;\n}","/**\n * getActualMonth\n * @param {number} num - number of the month from Date()\n * @return String of month\n * @throws TypeError\n * @example\n * getActualMonth(6)\n */\nexport default function getActualMonth(num = undefined) {\n  const number = Number(num);\n\n  if (!isNaN(number)) {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return months[number];\n  } else {\n    throw TypeError('number must be of type string or number');\n  }\n}","/**\n * quickSortArray\n * @param {array} arr - Array of values of a single type\n * @return Array\n * @throws TypeError\n * @example\n * quickSortArray([10, 7, 1, 4])\n * quickSortArray(['banana', 'orange', 'apple'])\n */\nexport default function quickSortArray(arr) {\n  if (!Array.isArray(arr)) {\n    throw TypeError('You must pass in an array');\n  } // Only want to sort on one type in a arr\n\n\n  const isValid = new Set(arr.map(item => typeof item)).size < 2;\n\n  if (!isValid) {\n    throw TypeError('You must pass in an array containing a single type');\n  } // So more quick sorts can be added in the future\n\n\n  switch (typeof arr[0]) {\n    case 'number':\n      return arr.sort((a, b) => {\n        return a - b;\n      });\n\n    case 'string':\n    default:\n      return arr.sort();\n  }\n}","/**\n * sortArrayOfObjects\n * @param {string} property - name of property to sort objects by\n * @param {array} arr - Array of objects to sort over\n * @param {boolean} desc - optional, default to descending order of objects\n * @return Array of objects, sorted by property\n * @throws TypeError\n * @example\n * sortArrayOfObjects('name', [{'name': 'Charles'}, {'name': 'Scott'}, {'name': 'Erik'}], true)\n */\nexport default function sortArrayOfObjects(property = undefined, arr = undefined, desc = false) {\n  const isArray = Array.isArray(arr);\n  let arrTypes = undefined;\n\n  if (isArray && arr.length === 1) {\n    return arr;\n  }\n\n  if (!isArray) {\n    throw TypeError('You must pass in an array to sort');\n  } else {\n    arrTypes = Array.from(new Set(arr.map(obj => typeof obj)));\n  }\n\n  if (arrTypes.length > 1 || !arrTypes.includes('object')) {\n    throw TypeError('You must pass in an array of only objects');\n  }\n\n  if (typeof property !== 'string') {\n    throw TypeError('You must pass in a key as type string to sort your objects by');\n  }\n\n  const order = desc ? -1 : 1;\n  return arr.sort((a, b) => {\n    const x = a[property];\n    const y = b[property]; // Magical stuff.\n\n    return order * (x < y ? -1 : +(x > y));\n  });\n}"],"names":[],"mappings":"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"}