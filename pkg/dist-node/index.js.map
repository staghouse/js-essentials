{"version":3,"file":"index.js","sources":["../dist-src/isOdd.js","../dist-src/isFutureDate.js","../dist-src/getURLParams.js","../dist-src/convertToDate.js","../dist-src/jsonMustaches.js","../dist-src/getDOMSiblings.js","../dist-src/getActualMonth.js","../dist-src/quickSortArray.js","../dist-src/sortArrayOfObjects.js"],"sourcesContent":["/**\n * isOdd\n * @param {number} number - Value to check if odd\n * @return Boolean\n * @example\n * isOdd(3)\n */\nexport default function isOdd(number) {\n  if (!isFinite(number) || !!(number % 1)) {\n    throw TypeError('Must provide a valid whole number');\n  }\n\n  return (Math.abs(number) ^ 1) === 2;\n}","/**\n * isFutureDate\n * @param {String|Date} when - when to compare against now\n * @param {String|Date} against - when to compare against the first argument\n * @return Boolean\n * @throws TypeError\n * @throws SyntaxError\n * @example\n * isFutureDate('2019-10-10', '2020-01-01')\n * isFutureDate(new Date('2019-10-10'), '2020-01-01')\n */\nexport default function isFutureDate(when, against = new Date()) {\n  // Check on our types, we only want String and Date for comparison.\n  const typesAreValid = (typeof when === 'string' || when instanceof Date) && (typeof against === 'string' || against instanceof Date);\n\n  if (!typesAreValid) {\n    throw TypeError('You must pass in at leasy one primary argument of type Date or String');\n  } // Its important to remember that when we pass in just a String date\n  // that we wont get a time. So we set this up to do checks later.\n\n\n  let now = new Date(when);\n  let then = new Date(against);\n  /**\n   * Check if valid Date. String with improper formats return `Invalid Date`\n   * which is literal non-sense. Its not an Error of any kind, Number, String, Date or\n   * truthy undefined. Just a typeof Object which no public keys.\n   * In fact, the prototype returns undefined but when chcking for it,\n   * we get not comparison validation at all\n   */\n\n  if (!isFinite(now) || !isFinite(then)) {\n    throw SyntaxError('You must pass in a valid date time with a type of Date');\n  } // Check if simply today is not the future.\n\n\n  const isToday = now.toDateString() === then.toDateString();\n\n  if (isToday) {\n    return false;\n  } // Store UTC miliseconds.\n\n\n  if (typeof when === 'string') {\n    now = Date.parse(when);\n  } else {\n    now = when.getTime();\n  } // Store UTC miliseconds.\n\n\n  if (typeof against === 'string') {\n    then = Date.parse(against);\n  } else {\n    then = against.getTime();\n  } // Compare the miliseconds. It's the only way to be sure.\n\n\n  return then < now;\n}","/**\n * getURLParams\n * @param {number} url - string or URL instance\n * @return object with key/val\n * @throws TypeError\n * @example\n * getURLParmas('http://www.placecage.com?height=100&width=200')\n */\nexport default function getURLParams(url = undefined) {\n  const typeOfUrl = typeof url;\n  const paramsObj = {};\n  let params = undefined;\n\n  if (typeOfUrl !== 'undefined' && (typeOfUrl === 'string' || url instanceof URL)) {\n    url = new URL(url);\n    params = new URLSearchParams(url.search);\n    params.forEach(function (value, key) {\n      paramsObj[key] = value;\n    });\n    return paramsObj;\n  } else {\n    throw TypeError('url must be of type String or URL');\n  }\n}","/**\n * convertToDate\n * @param {number|string|Date} date - Date you want to cast\n * @return Date\n * @throws TypeError\n * @example\n * convertToDate(number|string|date)\n */\nexport default function convertToDate(date) {\n  if (date instanceof Date) {\n    return date;\n  }\n\n  if (typeof date === 'string' || typeof date === 'number') {\n    return new Date(date);\n  }\n\n  throw TypeError('You must pass in a primary argument of type Date, String, or Number');\n}","/**\n * JSONMustaches - A JSON parser for mustaches templates in JSON objects.\n *\n * @type Class\n * @constructor @arguments\n * @param {object} schema - Schema compliant JSON object\n * @use {{type@text@url}}\n */\nexport default class jsonMustaches {\n  constructor(schema) {\n    this.schema = schema;\n    this.delimiter = '@';\n    this.allMustaches = /{{(.*?)}}/g;\n    this.singleMustache = /{{(.*?)}}/;\n    this.hasMustaches = true; // Let us assume\n  } // Basic checking for valid types and syntax\n\n\n  _init() {\n    if (!this.schema) {\n      throw SyntaxError('You must pass in a JSON Schema');\n    }\n\n    if (Object.keys(this.schema).length <= 0 || Object.prototype.toString.call(this.schema) !== '[object Object]') {\n      throw SyntaxError('You must pass in a valid JSON Schema Object with keys');\n    }\n\n    if (!JSON.stringify(this.schema).match(this.allMustaches)) {\n      this.hasMustaches = true;\n      return this.schema;\n    } else {\n      this.search();\n    }\n\n    return this;\n  }\n  /**\n   * @type function\n   * @param {string} value A string containing mustache templates\n   */\n\n\n  convert(value) {\n    // Get just whats inside the mustache\n    const values = value.match(this.singleMustache)[1]; // Destructure whats inside the mustaches via the delimiter\n\n    const [type, text, link = ''] = values.split(this.delimiter); // If we have a link, check if its an external link or not\n\n    const isTargetBlank = link.indexOf('/') === 0 ? '' : `target='_blank'`;\n    const mustacheMap = {\n      html: text,\n      link: `<a href='${link}/' ${isTargetBlank}/>${this.unwrap(text)}</a>`,\n      code: `<code>${text}</code>`\n    };\n    const newValue = mustacheMap[type];\n\n    if (!newValue) {\n      throw SyntaxError(`Invalid mustache template types. Available types are ${Object.keys(mustacheMap).join(', ')}`);\n    }\n\n    return mustacheMap[type];\n  }\n  /**\n   * @type function\n   * Cycle through the JSON schema and replace mustaches as needed,\n   * then return the new JSON\n   */\n\n\n  search() {\n    for (const prop in this.schema) {\n      // Store the value of each object in our schema\n      const value = this.schema[prop]; // Store the main property name so we can hydrate that too\n\n      value.propName = prop;\n\n      for (const key in value) {\n        const val = value[key].toString();\n        const mustaches = val.match(this.allMustaches);\n\n        if (mustaches) {\n          for (const mustache of mustaches) {\n            const hydratedHTML = value[key].replace(mustache, this.convert(mustache));\n            this.schema[prop][key] = hydratedHTML;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @type function\n   * @param {string} str Multiple word normalizing for anchors and URI's\n   */\n\n\n  unwrap(str) {\n    return str.split('-').map((n, i) => {\n      if (i > 0) {\n        return n.charAt(0).toUpperCase() + n.slice(1);\n      }\n\n      return n;\n    }).join('');\n  }\n\n}","/**\n * getDOMSiblings\n * @param {DOM Node} element - DOM element to find siblings for\n * @return Array\n */\nexport default function getDOMSiblings(element) {\n  if (!element) {\n    throw SyntaxError('You must pass in a single argument');\n  }\n\n  if (typeof element !== 'object' || element.nodeType !== 1) {\n    throw TypeError('You must pass in a single DOM Node');\n  }\n\n  let sibling = element.parentNode.firstChild;\n  const siblings = [];\n\n  for (null; sibling; sibling = sibling.nextSibling) {\n    if (sibling.nodeType !== 1 || sibling === element) {\n      continue;\n    }\n\n    siblings.push(sibling);\n  }\n\n  return siblings;\n}","/**\n * getActualMonth\n * @param {number} num - number of the month from Date()\n * @return String of month\n * @throws TypeError\n * @example\n * getActualMonth(6)\n */\nexport default function getActualMonth(num = undefined) {\n  const number = Number(num);\n\n  if (!isNaN(number)) {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return months[number];\n  } else {\n    throw TypeError('number must be of type string or number');\n  }\n}","/**\n * quickSortArray\n * @param {array} arr - Array of values of a single type\n * @return Array\n * @throws TypeError\n * @example\n * quickSortArray([10, 7, 1, 4])\n * quickSortArray(['banana', 'orange', 'apple'])\n */\nexport default function quickSortArray(arr) {\n  if (!Array.isArray(arr)) {\n    throw TypeError('You must pass in an array');\n  } // Only want to sort on one type in a arr\n\n\n  const isValid = new Set(arr.map(item => typeof item)).size < 2;\n\n  if (!isValid) {\n    throw TypeError('You must pass in an array containing a single type');\n  } // So more quick sorts can be added in the future\n\n\n  switch (typeof arr[0]) {\n    case 'number':\n      return arr.sort((a, b) => {\n        return a - b;\n      });\n\n    case 'string':\n    default:\n      return arr.sort();\n  }\n}","/**\n * sortArrayOfObjects\n * @param {string} property - name of property to sort objects by\n * @param {array} arr - Array of objects to sort over\n * @param {boolean} desc - optional, default to descending order of objects\n * @return Array of objects, sorted by property\n * @throws TypeError\n * @example\n * sortArrayOfObjects('name', [{'name': 'Charles'}, {'name': 'Scott'}, {'name': 'Erik'}], true)\n */\nexport default function sortArrayOfObjects(property = undefined, arr = undefined, desc = false) {\n  const isArray = Array.isArray(arr);\n  let arrTypes = undefined;\n\n  if (isArray && arr.length === 1) {\n    return arr;\n  }\n\n  if (!isArray) {\n    throw TypeError('You must pass in an array to sort');\n  } else {\n    arrTypes = Array.from(new Set(arr.map(obj => typeof obj)));\n  }\n\n  if (arrTypes.length > 1 || !arrTypes.includes('object')) {\n    throw TypeError('You must pass in an array of only objects');\n  }\n\n  if (typeof property !== 'string') {\n    throw TypeError('You must pass in a key as type string to sort your objects by');\n  }\n\n  const order = desc ? -1 : 1;\n  return arr.sort((a, b) => {\n    const x = a[property];\n    const y = b[property]; // Magical stuff.\n\n    return order * (x < y ? -1 : +(x > y));\n  });\n}"],"names":["isOdd","number","isFinite","TypeError","Math","abs","isFutureDate","when","against","Date","typesAreValid","now","then","SyntaxError","isToday","toDateString","parse","getTime","getURLParams","url","undefined","typeOfUrl","paramsObj","params","URL","URLSearchParams","search","forEach","value","key","convertToDate","date","jsonMustaches","constructor","schema","delimiter","allMustaches","singleMustache","hasMustaches","_init","Object","keys","length","prototype","toString","call","JSON","stringify","match","convert","values","type","text","link","split","isTargetBlank","indexOf","mustacheMap","html","unwrap","code","newValue","join","prop","propName","val","mustaches","mustache","hydratedHTML","replace","str","map","n","i","charAt","toUpperCase","slice","getDOMSiblings","element","nodeType","sibling","parentNode","firstChild","siblings","nextSibling","push","getActualMonth","num","Number","isNaN","months","quickSortArray","arr","Array","isArray","isValid","Set","item","size","sort","a","b","sortArrayOfObjects","property","desc","arrTypes","from","obj","includes","order","x","y"],"mappings":"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"}