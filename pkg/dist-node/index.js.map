{"version":3,"file":"index.js","sources":["../dist-src/isOdd.js","../dist-src/isFutureDate.js","../dist-src/getURLParams.js","../dist-src/convertToDate.js","../dist-src/JSONMustaches.js","../dist-src/getActualMonth.js","../dist-src/quickSortArray.js","../dist-src/commonDenominators.js","../dist-src/sortArrayOfObjects.js"],"sourcesContent":["/**\n * isOdd\n * @param {number} number - Value to check if odd\n * @return Boolean\n * @example\n * isOdd(3)\n */\nexport default function isOdd(number) {\n  if (!isFinite(number) || !!(number % 1)) {\n    throw TypeError('Must provide a valid whole number');\n  }\n\n  return (Math.abs(number) ^ 1) === 2;\n}","/**\n * isFutureDate\n * @param {String|Date} when - when to compare against now\n * @param {String|Date} against - when to compare against the first argument\n * @return Boolean\n * @throws TypeError\n * @throws SyntaxError\n * @example\n * isFutureDate('2019-10-10', '2020-01-01')\n * isFutureDate(new Date('2019-10-10'), '2020-01-01')\n */\nexport default function isFutureDate(when, against = new Date()) {\n  // Check on our types, we only want String and Date for comparison.\n  const typesAreValid = (typeof when === 'string' || when instanceof Date) && (typeof against === 'string' || against instanceof Date);\n\n  if (!typesAreValid) {\n    throw TypeError('You must pass in at leasy one primary argument of type Date or String');\n  } // Its important to remember that when we pass in just a String date\n  // that we wont get a time. So we set this up to do checks later.\n\n\n  let now = new Date(when);\n  let then = new Date(against);\n  /**\n   * Check if valid Date. String with improper formats return `Invalid Date`\n   * which is literal non-sense. Its not an Error of any kind, Number, String, Date or\n   * truthy undefined. Just a typeof Object which no public keys.\n   * In fact, the prototype returns undefined but when chcking for it,\n   * we get not comparison validation at all\n   */\n\n  if (!isFinite(now) || !isFinite(then)) {\n    throw SyntaxError('You must pass in a valid date time with a type of Date');\n  } // Check if simply today is not the future.\n\n\n  const isToday = now.toDateString() === then.toDateString();\n\n  if (isToday) {\n    return false;\n  } // Store UTC miliseconds.\n\n\n  if (typeof when === 'string') {\n    now = Date.parse(when);\n  } else {\n    now = when.getTime();\n  } // Store UTC miliseconds.\n\n\n  if (typeof against === 'string') {\n    then = Date.parse(against);\n  } else {\n    then = against.getTime();\n  } // Compare the miliseconds. It's the only way to be sure.\n\n\n  return then < now;\n}","/**\n * getURLParams\n * @param {number} url - string or URL instance\n * @return object with key/val\n * @throws TypeError\n * @example\n * getURLParmas('http://www.placecage.com?height=100&width=200')\n */\nexport default function getURLParams(url = undefined) {\n  const typeOfUrl = typeof url;\n  const paramsObj = {};\n  let params = undefined;\n\n  if (typeOfUrl !== 'undefined' && (typeOfUrl === 'string' || url instanceof URL)) {\n    url = new URL(url);\n    params = new URLSearchParams(url.search);\n    params.forEach(function (value, key) {\n      paramsObj[key] = value;\n    });\n    return paramsObj;\n  } else {\n    throw TypeError('url must be of type String or URL');\n  }\n}","/**\n * convertToDate\n * @param {number|string|Date} date - Date you want to cast\n * @return Date\n * @throws TypeError\n * @example\n * convertToDate(number|string|date)\n */\nexport default function convertToDate(date) {\n  if (date instanceof Date) {\n    return date;\n  }\n\n  if (typeof date === 'string' || typeof date === 'number') {\n    return new Date(date);\n  }\n\n  throw TypeError('You must pass in a primary argument of type Date, String, or Number');\n}","/**\n * JSONMustaches - A JSON parser for mustaches templates in JSON objects.\n *\n * @type Class\n * @constructor @arguments\n * @param {object} schema - Schema compliant JSON object\n * @use {{type@text@url}}\n */\nexport default class JSONMustaches {\n  constructor(schema) {\n    this.schema = schema;\n    this.delimiter = '@';\n    this.allMustaches = /{{(.*?)}}/g;\n    this.singleMustache = /{{(.*?)}}/; // Ensure we use Objects only for our schema\n\n    if (!this.schema || this.schema === Object(this.schema) && Object.prototype.toString.call(this.schema) === '[object Array]') {\n      throw SyntaxError('You must pass in a valid JSON Schema');\n    } else {\n      if (!JSON.stringify(this.schema).match(this.allMustaches)) {\n        return this.schema;\n      }\n    }\n  }\n  /**\n   * @type function\n   * @param {string} value A string containing mustache templates\n   */\n\n\n  hydrate(value) {\n    let values = value.match(this.singleMustache)[1]; // get just whats inside the mustache\n\n    let [type, text, link = ''] = values.split(this.delimiter);\n    const external = link.indexOf('/') === 0 ? '' : `target='_blank'`;\n    const mustacheMap = {\n      html: text,\n      link: `<a class='code-link' href='${link}/' ${external}/>${this.unwrap(text)}</a>`,\n      code: `<code>${text}</code>`\n    };\n    return mustacheMap[type];\n  }\n  /**\n   * @type function\n   * Cycle through the JSON schema and replace mustaches as needed,\n   * then return the new JSON\n   */\n\n\n  cycle() {\n    for (const prop in this.schema) {\n      // Store the value of each object in our schema\n      const value = this.schema[prop]; // Store the main property name so we can hydrate that too\n\n      value.main_property_name = prop;\n\n      for (const key in value) {\n        const val = value[key].toString();\n        const mustaches = val.match(this.allMustaches);\n\n        if (mustaches) {\n          for (const mustache of mustaches) {\n            const hydratedHTML = value[key].replace(mustache, this.hydrate(mustache));\n            this.schema[prop][key] = hydratedHTML;\n          }\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * @type function\n   * @param {string} str Multiple word normalizing for anchors and URI's\n   */\n\n\n  unwrap(str) {\n    return str.split('-').map((n, i) => {\n      if (i > 0) {\n        return n.charAt(0).toUpperCase() + n.slice(1);\n      }\n\n      return n;\n    }).join('');\n  }\n\n}","/**\n * getActualMonth\n * @param {number} num - number of the month from Date()\n * @return String of month\n * @throws TypeError\n * @example\n * getActualMonth(6)\n */\nexport default function getActualMonth(num = undefined) {\n  const number = Number(num);\n\n  if (!isNaN(number)) {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return months[number];\n  } else {\n    throw TypeError('number must be of type string or number');\n  }\n}","/**\n * quickSortArray\n * @param {array} arr - Array of values of a single type\n * @return Array\n * @throws TypeError\n * @example\n * quickSortArray([10, 7, 1, 4])\n * quickSortArray(['banana', 'orange', 'apple'])\n */\nexport default function quickSortArray(arr) {\n  if (!Array.isArray(arr)) {\n    throw TypeError('You must pass in an array');\n  } // Only want to sort on one type in a arr\n\n\n  const isValid = new Set(arr.map(item => typeof item)).size < 2;\n\n  if (!isValid) {\n    throw TypeError('You must pass in an array containing a single type');\n  } // So more quick sorts can be added in the future\n\n\n  switch (typeof arr[0]) {\n    case 'number':\n      return arr.sort((a, b) => {\n        return a - b;\n      });\n\n    case 'string':\n    default:\n      return arr.sort();\n  }\n}","export default function commonDenominators(...args) {\n  const numerators = args.filter(numerator => Number.isInteger(numerator) && numerator > 0);\n  const denominators = [Math.min(...numerators)];\n  let minimum = Math.ceil(denominators[0] / 2);\n\n  if (!numerators.length) {\n    return [];\n  }\n\n  if (minimum < 2) {\n    return [1];\n  }\n\n  while (minimum > 0) {\n    if (denominators[0] % minimum === 0) {\n      denominators.push(minimum);\n    }\n\n    minimum--;\n  }\n\n  denominators.reverse();\n\n  if (numerators.length === 1) {\n    return [...denominators];\n  }\n\n  numerators.splice(1, numerators.length - 1).map(numerator => {\n    let denominator = denominators.length - 1;\n\n    while (denominator >= 0) {\n      if (numerator % denominators[denominator] !== 0) {\n        denominators.splice(denominator, 1);\n      }\n\n      denominator--;\n    }\n  });\n  return denominators;\n}","/**\n * sortArrayOfObjects\n * @param {string} property - name of property to sort objects by\n * @param {array} arr - Array of objects to sort over\n * @param {boolean} desc - optional, default to descending order of objects\n * @return Array of objects, sorted by property\n * @throws TypeError\n * @example\n * sortArrayOfObjects('name', [{'name': 'Charles'}, {'name': 'Scott'}, {'name': 'Erik'}], true)\n */\nexport default function sortArrayOfObjects(property = undefined, arr = undefined, desc = false) {\n  const isArray = Array.isArray(arr);\n  let arrTypes = undefined;\n\n  if (isArray && arr.length === 1) {\n    return arr;\n  }\n\n  if (!isArray) {\n    throw TypeError('You must pass in an array to sort');\n  } else {\n    arrTypes = Array.from(new Set(arr.map(obj => typeof obj)));\n  }\n\n  if (arrTypes.length > 1 || !arrTypes.includes('object')) {\n    throw TypeError('You must pass in an array of only objects');\n  }\n\n  if (typeof property !== 'string') {\n    throw TypeError('You must pass in a key as type string to sort your objects by');\n  }\n\n  const order = desc ? -1 : 1;\n  return arr.sort((a, b) => {\n    const x = a[property];\n    const y = b[property]; // Magical stuff.\n\n    return order * (x < y ? -1 : +(x > y));\n  });\n}"],"names":["isOdd","number","isFinite","TypeError","Math","abs","isFutureDate","when","against","Date","typesAreValid","now","then","SyntaxError","isToday","toDateString","parse","getTime","getURLParams","url","undefined","typeOfUrl","paramsObj","params","URL","URLSearchParams","search","forEach","value","key","convertToDate","date","JSONMustaches","constructor","schema","delimiter","allMustaches","singleMustache","Object","prototype","toString","call","JSON","stringify","match","hydrate","values","type","text","link","split","external","indexOf","mustacheMap","html","unwrap","code","cycle","prop","main_property_name","val","mustaches","mustache","hydratedHTML","replace","str","map","n","i","charAt","toUpperCase","slice","join","getActualMonth","num","Number","isNaN","months","quickSortArray","arr","Array","isArray","isValid","Set","item","size","sort","a","b","commonDenominators","args","numerators","filter","numerator","isInteger","denominators","min","minimum","ceil","length","push","reverse","splice","denominator","sortArrayOfObjects","property","desc","arrTypes","from","obj","includes","order","x","y"],"mappings":"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"}